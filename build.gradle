plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.hospital'
version = '0.0.2-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Micrometer Elastic Registry
//	implementation 'io.micrometer:micrometer-registry-elastic:1.14.2'

//	implementation 'net.logstash.logback:logstash-logback-encoder:7.3'

	// Spring Actuator (헬스 체크)
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	// 다른 필요한 의존성들
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// 최신 Spring AOP 라이브러리로 교체 (Spring Boot 3.x 호환성 유지)
	implementation 'org.springframework:spring-aop:6.0.13'

	// Redis
	// implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	// implementation 'com.fasterxml.jackson.core:jackson-databind'
	// testImplementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// JSON 데이터 타입 변환
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.1'

	// Redis 클라이언트
	implementation 'io.lettuce:lettuce-core:6.5.1.RELEASE'

	// QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

	// Spring WebFlux (WebClient)
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// Apache POI (Excel 관련 작업)
	implementation 'org.apache.poi:poi-ooxml:5.2.3'

	// MySQL 데이터베이스 연결
	implementation 'mysql:mysql-connector-java:8.0.28'

	// Swagger를 위한 SpringDoc
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

	// 개발 도구 및 캐시
//	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-cache'

	// JDBC와 JPA
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// Thymeleaf (템플릿 엔진)
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	// Spring Security
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// JWT 라이브러리
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

	// Jakarta Servlet API 추가
	implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'

	// Lombok (필요시 사용)
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// 테스트
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

// React 관련 작업
task createStaticDir {
	doLast {
		def staticDir = file("${projectDir}/src/main/resources/static")
		if (!staticDir.exists()) {
			staticDir.mkdirs()
			println "Static directory created: ${staticDir}"
		}
	}
}

task cleanReactBuild(type: Delete) {
	delete fileTree(dir: "${projectDir}/src/main/resources/static").matching {
		include '**/*'
	}
}

task buildReact(type: Exec) {
	workingDir "${projectDir}/FrontEnd"
	commandLine "./node_modules/.bin/npm", 'run', 'build'
}

task copyReactBuild(type: Copy) {
	from "${projectDir}/FrontEnd/dist"
	into "${projectDir}/src/main/resources/static"
}

cleanReactBuild.mustRunAfter createStaticDir
copyReactBuild.dependsOn buildReact, createStaticDir
copyReactBuild.mustRunAfter cleanReactBuild

// 정적 리소스 설정과 빌드 타스크 연결
processResources.dependsOn copyReactBuild

bootJar {
	dependsOn cleanReactBuild, copyReactBuild
	enabled = true
}

jar {
	enabled = false
}