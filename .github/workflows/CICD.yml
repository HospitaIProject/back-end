name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the source code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Cache Gradle packages
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 3. Cache Node.js dependencies
      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 4. Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 5. Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 6. Build React and Backend
      - name: Build React and Backend
        run: |
          chmod +x ./gradlew
          cd FrontEnd && npm ci && npm run build && cd ..
          ./gradlew clean build

      # 7. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 8. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 9. Determine the current environment
      - name: Determine Current Environment
        id: current-env
        run: |
          current_env=$(ssh -o StrictHostKeyChecking=no -i ${{ secrets.KEY }} ubuntu@${{ secrets.EC2_HOST }} \
            "grep -oP '(?<=proxy_pass http://)\w+' /etc/nginx/sites-available/stmary.site | head -1")
          echo "Current environment is: $current_env"

          if [ "$current_env" == "blue" ]; then
              echo "new_env=green" >> $GITHUB_ENV
          elif [ "$current_env" == "green" ]; then
              echo "new_env=blue" >> $GITHUB_ENV
          else
              echo "Error: Unable to determine the current environment." >&2
              exit 1
          fi

      # 10. Build and Push Docker Image with Cache Optimization
      - name: Build and Push Docker Image
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/amd64,linux/arm64/v8 \
            --push \
            --tag ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:${{ env.new_env }} .

      # 11. Health Check and Update Nginx Configuration
      - name: Health Check and Update Nginx Configuration
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            set -e

            # Determine active and new environments
            current_env=${{ env.current_env }}
            new_env=${{ env.new_env }}
            new_port=8080

            if [ "$new_env" == "green" ]; then
              new_port=8081
            fi

            # Start the new environment container
            echo "Starting $new_env container..."
            docker-compose -f compose/docker-compose.yml up -d app-$new_env

            # Check health status of the new environment
            echo "Checking health of $new_env application..."
            for i in {1..10}; do
              response=$(curl -s http://localhost:$new_port/actuator/health | jq -r '.status')
              if [ "$response" == "UP" ]; then
                echo "$new_env application is healthy. Proceeding with traffic switch..."
                break
              else
                echo "Waiting for $new_env application to become healthy..."
                sleep 10
              fi
              if [ $i -eq 10 ]; then
                echo "$new_env application failed health check. Aborting deployment."
                exit 1
              fi
            done

            # Update Nginx to route traffic to the new environment
            echo "Updating Nginx configuration to route traffic to $new_env..."
            sudo sed -i "s|proxy_pass http://$current_env;|proxy_pass http://$new_env;|g" /etc/nginx/sites-available/stmary.site
            sudo sed -i "s|proxy_pass http://$current_env/actuator/health;|proxy_pass http://$new_env/actuator/health;|g" /etc/nginx/sites-available/stmary.site
            sudo systemctl reload nginx

            # Stop the old environment container
            echo "Stopping $current_env container..."
            docker-compose -f compose/docker-compose.yml stop app-$current_env
            docker-compose -f compose/docker-compose.yml rm -f app-$current_env
