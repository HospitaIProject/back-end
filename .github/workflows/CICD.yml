name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the source code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Cache Gradle packages
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 3. Cache Node.js dependencies
      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 4. Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 5. Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 6. Build React and Backend
      - name: Build React and Backend
        run: |
          chmod +x ./gradlew
          cd FrontEnd && npm ci && npm run build && cd ..
          ./gradlew clean build

      # 7. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 8. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 9. Prune Docker system before build
      - name: Prune Docker system
        run: |
          docker system prune -a --volumes -f

      # 10. Build and Push Docker Image with Cache Optimization
      - name: Build and Push Docker Image
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/amd64,linux/arm64/v8 \
            --cache-from=type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:cache \
            --cache-to=type=inline \
            --push \
            --tag ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:blue .

      # 11. Build and Push Docker Image with Cache Optimization
      - name: Build and Push Docker Image
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/amd64,linux/arm64/v8 \
            --cache-from=type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:cache \
            --cache-to=type=inline \
            --push \
            --tag ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:green .

      # 12. Health Check and Update Nginx Configuration
      - name: Health Check and Update Nginx Configuration
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            set -e

            # 1. Start Green container
            echo "Starting Green container..."
            docker-compose -f /home/ubuntu/compose/docker-compose.yml up -d app-green

            # 2. Check health status of Green application
            echo "Checking health of Green application..."
            for i in {1..10}; do
              response=$(curl -s http://localhost:8081/actuator/health | jq -r '.status')
              if [ "$response" == "UP" ]; then
                echo "Green application is healthy. Proceeding with traffic switch..."
                break
              else
                echo "Waiting for Green application to become healthy..."
                sleep 10
              fi
              if [ $i -eq 10 ]; then
                echo "Green application failed health check. Aborting deployment."
                exit 1
              fi
            done

            # 3. Update Nginx to route traffic to Green
            echo "Updating Nginx configuration to Green..."
            sudo sed -i 's/server localhost:8080;/# server localhost:8080;\\n    server localhost:8081;/' /etc/nginx/sites-available/stmary
            sudo systemctl restart nginx

            # 4. Stop Blue container
            echo "Stopping Blue container..."
            docker-compose -f /home/ubuntu/compose/docker-compose.yml stop app-blue
            docker-compose -f /home/ubuntu/compose/docker-compose.yml rm -f app-blue

      # # 11. Deploy to EC2
      # - name: Deploy to EC2
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ubuntu
      #     key: ${{ secrets.EC2_PRIVATE_KEY }}
      #     script: |
      #       set -e
      #       docker logout || true
      #       echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      #       docker-compose -f /home/ubuntu/compose/docker-compose.yml pull
      #       docker-compose -f /home/ubuntu/compose/docker-compose.yml up -d
